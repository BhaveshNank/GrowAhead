name: 🧪 Continuous Integration

# When should this workflow run?
on:
  push:
    branches: [ main, master, dev ]  # Run on pushes to these branches
  pull_request:
    branches: [ main, master, dev ]  # Run on pull requests to these branches

# Jobs define what tasks to run
jobs:
  # Job 1: Test Backend
  backend-tests:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest  # Use latest Ubuntu Linux server
    
    steps:
      # Step 1: Get your code from GitHub
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Set up Node.js environment
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Use Node.js version 18
          cache: 'npm'        # Cache npm dependencies for faster builds
          cache-dependency-path: Backend/package-lock.json
      
      # Step 3: Install backend dependencies
      - name: 📦 Install dependencies
        working-directory: ./Backend
        run: npm ci  # Clean install (faster and more reliable than npm install)
      
      # Step 4: Run backend tests
      - name: 🧪 Run backend tests
        working-directory: ./Backend
        run: npm test
      
      # Step 5: Upload test results (optional but useful for debugging)
      - name: 📊 Upload test results
        if: always()  # Run even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: Backend/test-results/

  # Job 2: Test Frontend
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Get your code
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Setup Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      # Step 3: Install frontend dependencies
      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      # Step 4: Run ESLint to check code quality
      - name: 🔍 Lint code
        working-directory: ./frontend
        run: npm run lint
        continue-on-error: true  # Don't fail the build if linting fails
      
      # Step 5: Build the Next.js app to ensure it compiles
      - name: 🏗️ Build application
        working-directory: ./frontend
        run: npm run build
      
      # Step 6: Run TypeScript type checking
      - name: ✅ Type check
        working-directory: ./frontend
        run: npx tsc --noEmit
        continue-on-error: true

  # Job 3: Security Audit
  security-audit:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      # Check backend for vulnerabilities
      - name: 🔒 Audit backend dependencies
        working-directory: ./Backend
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      # Check frontend for vulnerabilities
      - name: 🔒 Audit frontend dependencies
        working-directory: ./frontend
        run: npm audit --audit-level=moderate
        continue-on-error: true
